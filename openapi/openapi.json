{
    "openapi": "3.0.0",
    "info": {
        "title": "OpenSubsonic API",
        "version": "1.16.1"
    },
    "servers": [
        {
            "url": "https://api.server.test/v1"
        }
    ],
    "security": [
        {
            "apiKeyAuth": [],
            "protocolVersion": [],
            "clientName": [],
            "format": []
        },
        {
            "username": [],
            "legacyPassword": [],
            "protocolVersion": [],
            "clientName": [],
            "format": []
        },
        {
            "username": [],
            "token": [],
            "salt": [],
            "protocolVersion": [],
            "clientName": [],
            "format": []
        }
    ],
    "paths": {
        "/rest/addChatMessage": {
            "$ref": "./endpoints/addChatMessage.json"
        },
        "/rest/changePassword": {
            "$ref": "./endpoints/changePassword.json"
        },
        "/rest/createBookmark": {
            "$ref": "./endpoints/createBookmark.json"
        },
        "/rest/createInternetRadioStation": {
            "$ref": "./endpoints/createInternetRadioStation.json"
        },
        "/rest/createPlaylist": {
            "$ref": "./endpoints/createPlaylist.json"
        },
        "/rest/createPodcastChannel": {
            "$ref": "./endpoints/createPodcastChannel.json"
        },
        "/rest/createShare": {
            "$ref": "./endpoints/createShare.json"
        },
        "/rest/createUser": {
            "$ref": "./endpoints/createUser.json"
        },
        "/rest/deleteBookmark": {
            "$ref": "./endpoints/deleteBookmark.json"
        },
        "/rest/deleteInternetRadioStation": {
            "$ref": "./endpoints/deleteInternetRadioStation.json"
        },
        "/rest/deletePlaylist": {
            "$ref": "./endpoints/deletePlaylist.json"
        },
        "/rest/deletePodcastChannel": {
            "$ref": "./endpoints/deletePodcastChannel.json"
        },
        "/rest/deletePodcastEpisode": {
            "$ref": "./endpoints/deletePodcastEpisode.json"
        },
        "/rest/deleteShare": {
            "$ref": "./endpoints/deleteShare.json"
        },
        "/rest/deleteUser": {
            "$ref": "./endpoints/deleteUser.json"
        },
        "/rest/download": {
            "$ref": "./endpoints/download.json"
        },
        "/rest/downloadPodcastEpisode": {
            "$ref": "./endpoints/downloadPodcastEpisode.json"
        },
        "/rest/getAlbum": {
            "$ref": "./endpoints/getAlbum.json"
        },
        "/rest/getAlbumInfo": {
            "$ref": "./endpoints/getAlbumInfo.json"
        },
        "/rest/getAlbumInfo2": {
            "$ref": "./endpoints/getAlbumInfo2.json"
        },
        "/rest/getAlbumList": {
            "$ref": "./endpoints/getAlbumList.json"
        },
        "/rest/getAlbumList2": {
            "$ref": "./endpoints/getAlbumList2.json"
        },
        "/rest/getArtist": {
            "$ref": "./endpoints/getArtist.json"
        },
        "/rest/getArtistInfo": {
            "$ref": "./endpoints/getArtistInfo.json"
        },
        "/rest/getArtistInfo2": {
            "$ref": "./endpoints/getArtistInfo2.json"
        },
        "/rest/getArtists": {
            "$ref": "./endpoints/getArtists.json"
        },
        "/rest/getAvatar": {
            "$ref": "./endpoints/getAvatar.json"
        },
        "/rest/getBookmarks": {
            "$ref": "./endpoints/getBookmarks.json"
        },
        "/rest/getCaptions": {
            "$ref": "./endpoints/getCaptions.json"
        },
        "/rest/getChatMessages": {
            "$ref": "./endpoints/getChatMessages.json"
        },
        "/rest/getCoverArt": {
            "$ref": "./endpoints/getCoverArt.json"
        },
        "/rest/getGenres": {
            "$ref": "./endpoints/getGenres.json"
        },
        "/rest/getIndexes": {
            "get": {
                "summary": "Returns an indexed structure of all artists.",
                "description": "Returns an indexed structure of all artists.",
                "operationId": "getIndexes",
                "tags": [
                    "Browsing"
                ],
                "parameters": [
                    {
                        "name": "musicFolderId",
                        "in": "query",
                        "description": "If specified, only return artists in the music folder with the given ID. See `getMusicFolders`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ifModifiedSince",
                        "in": "query",
                        "description": "If specified, only return a result if the artist collection has changed since the given time (in milliseconds since 1 Jan 1970).",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetIndexesResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getIndexes",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getindexes/"
                }
            },
            "post": {
                "summary": "Returns an indexed structure of all artists.",
                "description": "Returns an indexed structure of all artists.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetIndexes",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "musicFolderId": {
                                        "type": "string",
                                        "description": "If specified, only return artists in the music folder with the given ID. See `getMusicFolders`."
                                    },
                                    "ifModifiedSince": {
                                        "type": "integer",
                                        "description": "If specified, only return a result if the artist collection has changed since the given time (in milliseconds since 1 Jan 1970)."
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetIndexesResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getIndexes",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getindexes/"
                }
            }
        },
        "/rest/getInternetRadioStations": {
            "get": {
                "summary": "Returns all internet radio stations.",
                "description": "Returns all internet radio stations. Takes no extra parameters.",
                "operationId": "getInternetRadioStations",
                "tags": [
                    "Internet Radio"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetInternetRadioStationsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getInternetRadioStations",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getinternetradiostations/"
                }
            },
            "post": {
                "summary": "Returns all internet radio stations.",
                "description": "Returns all internet radio stations. Takes no extra parameters.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetInternetRadioStations",
                "tags": [
                    "Internet Radio"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetInternetRadioStationsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getInternetRadioStations",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getinternetradiostations/"
                }
            }
        },
        "/rest/getLicense": {
            "get": {
                "summary": "Get details about the software license.",
                "description": "Get details about the software license.",
                "operationId": "getLicense",
                "tags": [
                    "System"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLicenseResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getLicense",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getlicense/"
                }
            },
            "post": {
                "summary": "Get details about the software license.",
                "description": "Get details about the software license.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetLicense",
                "tags": [
                    "System"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLicenseResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getLicense",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getlicense/"
                }
            }
        },
        "/rest/getLyrics": {
            "get": {
                "summary": "Searches for and returns lyrics for a given song.",
                "description": "Searches for and returns lyrics for a given song.",
                "operationId": "getLyrics",
                "tags": [
                    "Media Retrieval"
                ],
                "parameters": [
                    {
                        "name": "artist",
                        "in": "query",
                        "description": "The artist name.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "description": "The song title.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLyricsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getLyrics",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getlyrics/"
                }
            },
            "post": {
                "summary": "Searches for and returns lyrics for a given song.",
                "description": "Searches for and returns lyrics for a given song.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetLyrics",
                "tags": [
                    "Media Retrieval"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "artist": {
                                        "type": "string",
                                        "description": "The artist name."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "The song title."
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLyricsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                }
            }
        },
        "/rest/getLyricsBySongId": {
            "get": {
                "summary": "Add support for synchronized lyrics, multiple languages, and retrieval by song ID. ",
                "description": "OpenSubsonic extension name `songLyrics` (As returned by `getOpenSubsonicExtensions`). Retrieves all structured lyrics from the server for a given song. The lyrics can come from embedded tags (SYLT/USLT), LRC file/text file, or any other external source.",
                "operationId": "getLyricsBySongId",
                "tags": [
                    "Media Retrieval"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The track ID.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLyricsBySongIdResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Extension not supported."
                    }
                },
                "externalDocs": {
                    "description": "getLyricsBySongId",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getlyricsbysongid/"
                }
            },
            "post": {
                "summary": "Add support for synchronized lyrics, multiple languages, and retrieval by song ID.",
                "description": "OpenSubsonic extension name `songLyrics` (As returned by `getOpenSubsonicExtensions`). Retrieves all structured lyrics from the server for a given song. The lyrics can come from embedded tags (SYLT/USLT), LRC file/text file, or any other external source.",
                "operationId": "postGetLyricsBySongId",
                "tags": [
                    "Media Retrieval"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The track ID."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLyricsBySongIdResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Extension not supported."
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getLyricsBySongId",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getlyricsbysongid/"
                }
            }
        },
        "/rest/getMusicDirectory": {
            "get": {
                "summary": "Returns a listing of all files in a music directory.",
                "description": "Returns a listing of all files in a music directory. Typically used to get list of albums for an artist, or list of songs for an album.",
                "operationId": "getMusicDirectory",
                "tags": [
                    "Browsing"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "A string which uniquely identifies the music folder. Obtained by calls to `getIndexes` or `getMusicDirectory`.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMusicDirectoryResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getMusicDirectory",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getmusicdirectory/"
                }
            },
            "post": {
                "summary": "Returns a listing of all files in a music directory.",
                "description": "Returns a listing of all files in a music directory. Typically used to get list of albums for an artist, or list of songs for an album.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetMusicDirectory",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "A string which uniquely identifies the music folder. Obtained by calls to `getIndexes` or `getMusicDirectory`."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMusicDirectoryResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getMusicDirectory",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getmusicdirectory/"
                }
            }
        },
        "/rest/getMusicFolders": {
            "get": {
                "summary": "Returns all configured top-level music folders.",
                "description": "Returns all configured top-level music folders. Takes no extra parameters.",
                "operationId": "getMusicFolders",
                "tags": [
                    "Browsing"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMusicFoldersResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getMusicFolders",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getmusicfolders/"
                }
            },
            "post": {
                "summary": "Returns all configured top-level music folders.",
                "description": "Returns all configured top-level music folders. Takes no extra parameters.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetMusicFolders",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMusicFoldersResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getMusicFolders",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getmusicfolders/"
                }
            }
        },
        "/rest/getNewestPodcasts": {
            "get": {
                "summary": "Returns the most recently published Podcast episodes.",
                "description": "Returns the most recently published Podcast episodes.",
                "operationId": "getNewestPodcasts",
                "tags": [
                    "Podcast"
                ],
                "parameters": [
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of episodes to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNewestPodcastsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getNewestPodcasts",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getnewestpodcasts/"
                }
            },
            "post": {
                "summary": "Returns the most recently published Podcast episodes.",
                "description": "Returns the most recently published Podcast episodes.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetNewestPodcasts",
                "tags": [
                    "Podcast"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "count": {
                                        "type": "integer",
                                        "description": "The maximum number of episodes to return.",
                                        "default": 20
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNewestPodcastsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getNewestPodcasts",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getnewestpodcasts/"
                }
            }
        },
        "/rest/getNowPlaying": {
            "get": {
                "summary": "Returns what is currently being played by all users.",
                "description": "Returns what is currently being played by all users. Takes no extra parameters.",
                "operationId": "getNowPlaying",
                "tags": [
                    "Lists"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNowPlayingResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getNowPlaying",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getnowplaying/"
                }
            },
            "post": {
                "summary": "Returns what is currently being played by all users.",
                "description": "Returns what is currently being played by all users. Takes no extra parameters.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetNowPlaying",
                "tags": [
                    "Lists"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNowPlayingResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                }
            }
        },
        "/rest/getOpenSubsonicExtensions": {
            "get": {
                "summary": "List the OpenSubsonic extensions supported by this server.",
                "description": "List the OpenSubsonic extensions supported by this server.",
                "operationId": "getOpenSubsonicExtensions",
                "tags": [
                    "System"
                ],
                "security": [],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOpenSubsonicExtensionsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getOpenSubsonicExtensions",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getopensubsonicextensions/"
                }
            },
            "post": {
                "summary": "List the OpenSubsonic extensions supported by this server.",
                "description": "List the OpenSubsonic extensions supported by this server.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetOpenSubsonicExtensions",
                "tags": [
                    "System"
                ],
                "security": [],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOpenSubsonicExtensionsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getOpenSubsonicExtensions",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getopensubsonicextensions/"
                }
            }
        },
        "/rest/getPlaylist": {
            "get": {
                "summary": "Returns a listing of files in a saved playlist.",
                "description": "Returns a listing of files in a saved playlist.",
                "operationId": "getPlaylist",
                "tags": [
                    "Playlists"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the playlist to return, as obtained by `getPlaylists`.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPlaylistResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getPlaylist",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplaylist/"
                }
            },
            "post": {
                "summary": "Returns a listing of files in a saved playlist.",
                "description": "Returns a listing of files in a saved playlist.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetPlaylist",
                "tags": [
                    "Playlists"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "ID of the playlist to return, as obtained by `getPlaylists`."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPlaylistResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getPlaylist",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplaylist/"
                }
            }
        },
        "/rest/getPlaylists": {
            "get": {
                "summary": "Returns all playlists a user is allowed to play.",
                "description": "Returns all playlists a user is allowed to play.",
                "operationId": "getPlaylists",
                "tags": [
                    "Playlists"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "(Since 1.8.0) If specified, return playlists for this user rather than for the authenticated user. The authenticated user must have admin role if this parameter is used.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPlaylistsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getPlaylists",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplaylists/"
                }
            },
            "post": {
                "summary": "Returns all playlists a user is allowed to play.",
                "description": "Returns all playlists a user is allowed to play.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetPlaylists",
                "tags": [
                    "Playlists"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "(Since 1.8.0) If specified, return playlists for this user rather than for the authenticated user. The authenticated user must have admin role if this parameter is used."
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPlaylistsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getPlaylists",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplaylists/"
                }
            }
        },
        "/rest/getPlayQueue": {
            "get": {
                "summary": "Returns the state of the play queue for this user.",
                "description": "Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).",
                "operationId": "getPlayQueue",
                "tags": [
                    "Bookmarks"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPlayQueueResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getPlayQueue",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplayqueue/"
                }
            },
            "post": {
                "summary": "Returns the state of the play queue for this user.",
                "description": "Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetPlayQueue",
                "tags": [
                    "Bookmarks"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPlayQueueResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getPlayQueue",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplayqueue/"
                }
            }
        },
        "/rest/getPodcastEpisode": {
            "get": {
                "summary": "Returns details for a podcast episode.",
                "description": "OpenSubsonic extension name getPodcastEpisode (As returned by `getOpenSubsonicExtensions`). Returns details for a podcast episode.",
                "operationId": "getPodcastEpisode",
                "tags": [
                    "Podcast"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The podcast episode ID.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPodcastEpisodeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Extension not supported."
                    }
                },
                "externalDocs": {
                    "description": "getPodcastEpisode",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getpodcastepisode/"
                }
            },
            "post": {
                "summary": "Returns details for a podcast episode.",
                "description": "OpenSubsonic extension name `getPodcastEpisode` (As returned by `getOpenSubsonicExtensions`). Returns details for a podcast episode.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetPodcastEpisode",
                "tags": [
                    "Podcast"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The podcast episode ID."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPodcastEpisodeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Extension not supported."
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getPodcastEpisode",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getpodcastepisode/"
                }
            }
        },
        "/rest/getPodcasts": {
            "get": {
                "summary": "Returns all Podcast channels the server subscribes to, and (optionally) their episodes.",
                "description": "Returns all Podcast channels the server subscribes to, and (optionally) their episodes. This method can also be used to return details for only one channel - refer to the id parameter. A typical use case for this method would be to first retrieve all channels without episodes, and then retrieve all episodes for the single channel the user selects.",
                "operationId": "getPodcasts",
                "tags": [
                    "Podcast"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "(Since 1.9.0) If specified, only return the Podcast channel with this ID.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeEpisodes",
                        "in": "query",
                        "description": "(Since 1.9.0) Whether to include Podcast episodes in the returned result.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPodcastsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getPodcasts",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getpodcasts/"
                }
            },
            "post": {
                "summary": "Returns all Podcast channels the server subscribes to, and (optionally) their episodes.",
                "description": "Returns all Podcast channels the server subscribes to, and (optionally) their episodes. This method can also be used to return details for only one channel - refer to the id parameter. A typical use case for this method would be to first retrieve all channels without episodes, and then retrieve all episodes for the single channel the user selects.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetPodcasts",
                "tags": [
                    "Podcast"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "(Since 1.9.0) If specified, only return the Podcast channel with this ID."
                                    },
                                    "includeEpisodes": {
                                        "type": "boolean",
                                        "description": "(Since 1.9.0) Whether to include Podcast episodes in the returned result.",
                                        "default": true
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPodcastsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getPodcasts",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getpodcasts/"
                }
            }
        },
        "/rest/getRandomSongs": {
            "get": {
                "summary": "Returns random songs matching the given criteria.",
                "description": "Returns random songs matching the given criteria.",
                "operationId": "getRandomSongs",
                "tags": [
                    "Lists"
                ],
                "parameters": [
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The maximum number of songs to return. Max 500.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "minimum": 0,
                            "maximum": 500
                        }
                    },
                    {
                        "name": "genre",
                        "in": "query",
                        "description": "Only returns songs belonging to this genre.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fromYear",
                        "in": "query",
                        "description": "(Since 1.9.0) Only return songs from this year or later.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "toYear",
                        "in": "query",
                        "description": "Only return songs published before or in this year.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "musicFolderId",
                        "in": "query",
                        "description": "Only return songs in the music folder with the given ID. See `getMusicFolders`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRandomSongsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getRandomSongs",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getrandomsongs/"
                }
            },
            "post": {
                "summary": "Returns random songs matching the given criteria.",
                "description": "Returns random songs matching the given criteria.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetRandomSongs",
                "tags": [
                    "Lists"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "size": {
                                        "type": "integer",
                                        "description": "The maximum number of songs to return. Max 500.",
                                        "default": 10,
                                        "minimum": 0,
                                        "maximum": 500
                                    },
                                    "genre": {
                                        "type": "string",
                                        "description": "Only returns songs belonging to this genre."
                                    },
                                    "fromYear": {
                                        "type": "integer",
                                        "description": "(Since 1.9.0) Only return songs from this year or later."
                                    },
                                    "toYear": {
                                        "type": "integer",
                                        "description": "Only return songs published before or in this year."
                                    },
                                    "musicFolderId": {
                                        "type": "string",
                                        "description": "Only return songs in the music folder with the given ID. See `getMusicFolders`."
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRandomSongsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getRandomSongs",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getrandomsongs/"
                }
            }
        },
        "/rest/getScanStatus": {
            "get": {
                "summary": "Returns the current status for media library scanning.",
                "description": "Returns the current status for media library scanning. Takes no extra parameters.",
                "operationId": "getScanStatus",
                "tags": [
                    "Media Library Scanning"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetScanStatusResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getScanStatus",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getscanstatus/"
                }
            },
            "post": {
                "summary": "Returns the current status for media library scanning.",
                "description": "Returns the current status for media library scanning. Takes no extra parameters.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetScanStatus",
                "tags": [
                    "Media Library Scanning"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetScanStatusResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getScanStatus",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getscanstatus/"
                }
            }
        },
        "/rest/getShares": {
            "get": {
                "summary": "Returns information about shared media this user is allowed to manage.",
                "description": "Returns information about shared media this user is allowed to manage. Takes no extra parameters.",
                "operationId": "getShares",
                "tags": [
                    "Sharing"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharesResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getShares",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getshares/"
                }
            },
            "post": {
                "summary": "Returns information about shared media this user is allowed to manage.",
                "description": "Returns information about shared media this user is allowed to manage. Takes no extra parameters.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetShares",
                "tags": [
                    "Sharing"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharesResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getShares",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getshares/"
                }
            }
        },
        "/rest/getSimilarSongs": {
            "get": {
                "summary": "Returns a random collection of songs from the given artist and similar artists.",
                "description": "Returns a random collection of songs from the given artist and similar artists, using data from last.fm. Typically used for artist radio features.",
                "operationId": "getSimilarSongs",
                "tags": [
                    "Browsing"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The artist, album or song ID.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Max number of songs to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "minimum": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSimilarSongsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getSimilarSongs",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsimilarsongs/"
                }
            },
            "post": {
                "summary": "Returns a random collection of songs from the given artist and similar artists.",
                "description": "Returns a random collection of songs from the given artist and similar artists, using data from last.fm. Typically used for artist radio features.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetSimilarSongs",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The artist, album or song ID."
                                    },
                                    "count": {
                                        "type": "integer",
                                        "default": 50,
                                        "minimum": 0,
                                        "description": "Max number of songs to return."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSimilarSongsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getSimilarSongs",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsimilarsongs/"
                }
            }
        },
        "/rest/getSimilarSongs2": {
            "get": {
                "summary": "Returns a random collection of songs from the given artist and similar artists (v2).",
                "description": "Similar to `getSimilarSongs`, but organizes music according to ID3 tags.",
                "operationId": "getSimilarSongs2",
                "tags": [
                    "Browsing"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The artist, album or song ID.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Max number of songs to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "minimum": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSimilarSongs2Response"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getSimilarSongs2",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsimilarsongs2/"
                }
            },
            "post": {
                "summary": "Returns a random collection of songs from the given artist and similar artists (v2).",
                "description": "Similar to `getSimilarSongs`, but organizes music according to ID3 tags.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetSimilarSongs2",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The artist, album or song ID."
                                    },
                                    "count": {
                                        "type": "integer",
                                        "default": 50,
                                        "minimum": 0,
                                        "description": "Max number of songs to return."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSimilarSongs2Response"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getSimilarSongs2",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsimilarsongs2/"
                }
            }
        },
        "/rest/getSong": {
            "get": {
                "summary": "Returns details for a song.",
                "description": "Returns details for a song.",
                "operationId": "getSong",
                "tags": [
                    "Browsing"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The song ID.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSongResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getSong",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsong/"
                }
            },
            "post": {
                "summary": "Returns details for a song.",
                "description": "Returns details for a song.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetSong",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The song ID."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSongResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                }
            }
        },
        "/rest/getSongsByGenre": {
            "get": {
                "summary": "Returns songs in a given genre.",
                "description": "Returns songs in a given genre.",
                "operationId": "getSongsByGenre",
                "tags": [
                    "Lists"
                ],
                "parameters": [
                    {
                        "name": "genre",
                        "in": "query",
                        "description": "The genre, as returned by `getGenres`.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of songs to return. Max 500.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "minimum": 0,
                            "maximum": 500
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset. Useful if you want to page through the songs in a genre.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "musicFolderId",
                        "in": "query",
                        "description": "(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSongsByGenreResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getSongsByGenre",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsongsbygenre/"
                }
            },
            "post": {
                "summary": "Returns songs in a given genre.",
                "description": "Returns songs in a given genre.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetSongsByGenre",
                "tags": [
                    "Lists"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "genre": {
                                        "type": "string",
                                        "description": "The genre, as returned by `getGenres`."
                                    },
                                    "count": {
                                        "type": "integer",
                                        "description": "The maximum number of songs to return. Max 500.",
                                        "default": 10,
                                        "minimum": 0,
                                        "maximum": 500
                                    },
                                    "offset": {
                                        "type": "integer",
                                        "description": "The offset. Useful if you want to page through the songs in a genre.",
                                        "default": 0,
                                        "minimum": 0
                                    },
                                    "musicFolderId": {
                                        "type": "string",
                                        "description": "(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`."
                                    }
                                },
                                "required": [
                                    "genre"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSongsByGenreResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getSongsByGenre",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsongsbygenre/"
                }
            }
        },
        "/rest/getStarred": {
            "get": {
                "summary": "Returns starred songs, albums and artists.",
                "description": "Returns starred songs, albums and artists.",
                "operationId": "getStarred",
                "tags": [
                    "Lists"
                ],
                "parameters": [
                    {
                        "name": "musicFolderId",
                        "in": "query",
                        "description": "(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetStarredResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getStarred",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getstarred/"
                }
            },
            "post": {
                "summary": "Returns starred songs, albums and artists.",
                "description": "Returns starred songs, albums and artists.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetStarred",
                "tags": [
                    "Lists"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetStarredResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getStarred",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getstarred/"
                }
            }
        },
        "/rest/getStarred2": {
            "get": {
                "summary": "Returns starred songs, albums and artists.",
                "description": "Similar to `getStarred`, but organizes music according to ID3 tags.",
                "operationId": "getStarred2",
                "tags": [
                    "Lists"
                ],
                "parameters": [
                    {
                        "name": "musicFolderId",
                        "in": "query",
                        "description": "(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetStarred2Response"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getStarred2",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getstarred2/"
                }
            },
            "post": {
                "summary": "Returns starred songs, albums and artists.",
                "description": "Similar to `getStarred`, but organizes music according to ID3 tags.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetStarred2",
                "tags": [
                    "Lists"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetStarred2Response"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getStarred2",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getstarred2/"
                }
            }
        },
        "/rest/getTopSongs": {
            "get": {
                "summary": "Returns top songs for the given artist.",
                "description": "Returns top songs for the given artist, using data from last.fm.",
                "operationId": "getTopSongs",
                "tags": [
                    "Browsing"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The artist name.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of songs to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "minimum": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTopSongsResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getTopSongs",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/gettopsongs/"
                }
            },
            "post": {
                "summary": "Returns top songs for the given artist.",
                "description": "Returns top songs for the given artist, using data from last.fm.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetTopSongs",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "The artist name.",
                                        "type": "string"
                                    },
                                    "count": {
                                        "description": "The maximum number of songs to return.",
                                        "type": "integer",
                                        "default": 50,
                                        "minimum": 0
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTopSongsResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getTopSongs",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/gettopsongs/"
                }
            }
        },
        "/rest/getUser": {
            "get": {
                "summary": "Get details about a given user, including which authorization roles and folder access it has.",
                "description": "Get details about a given user, including which authorization roles and folder access it has. Can be used to enable/disable certain features in the client, such as jukebox control.",
                "operationId": "getUser",
                "tags": [
                    "User Management"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The name of the user to retrieve. You can only retrieve your own user unless you have admin privileges.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getUser",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getuser/"
                }
            },
            "post": {
                "summary": "Get details about a given user, including which authorization roles and folder access it has.",
                "description": "Get details about a given user, including which authorization roles and folder access it has. Can be used to enable/disable certain features in the client, such as jukebox control.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetUser",
                "tags": [
                    "User Management"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "The name of the user to retrieve. You can only retrieve your own user unless you have admin privileges."
                                    }
                                },
                                "required": [
                                    "username"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getUser",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getuser/"
                }
            }
        },
        "/rest/getUsers": {
            "get": {
                "summary": "Get details about all users, including which authorization roles and folder access they have",
                "description": "Get details about all users, including which authorization roles and folder access they have. Only users with admin privileges are allowed to call this method.",
                "operationId": "getUsers",
                "tags": [
                    "User Management"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUsersResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getUsers",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getusers/"
                }
            },
            "post": {
                "summary": "Get details about all users, including which authorization roles and folder access they have",
                "description": "Get details about all users, including which authorization roles and folder access they have. Only users with admin privileges are allowed to call this method.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetUsers",
                "tags": [
                    "User Management"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUsersResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getUsers",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getusers/"
                }
            }
        },
        "/rest/getVideoInfo": {
            "get": {
                "summary": "Returns details for a video.",
                "description": "Returns details for a video, including information about available audio tracks, subtitles (captions) and conversions.",
                "operationId": "getVideoInfo",
                "tags": [
                    "Browsing"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The video ID.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetVideoInfoResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getVideoInfo",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getvideoinfo/"
                }
            },
            "post": {
                "summary": "Returns details for a video.",
                "description": "Returns details for a video, including information about available audio tracks, subtitles (captions) and conversions.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetVideoInfo",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The video ID."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetVideoInfoResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getVideoInfo",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getvideoinfo/"
                }
            }
        },
        "/rest/getVideos": {
            "get": {
                "summary": "Returns all video files.",
                "description": "Returns all video files.",
                "operationId": "getVideos",
                "tags": [
                    "Browsing"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetVideosResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "getVideos",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getvideos/"
                }
            },
            "post": {
                "summary": "Returns all video files.",
                "description": "Returns all video files.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postGetVideos",
                "tags": [
                    "Browsing"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetVideosResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "getVideos",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getvideos/"
                }
            }
        },
        "/rest/hls.m3u8": {
            "get": {
                "summary": "Downloads a given media file (HLS).",
                "description": "Creates an HLS (HTTP Live Streaming) playlist used for streaming video or audio. HLS is a streaming protocol implemented by Apple and works by breaking the overall stream into a sequence of small HTTP-based file downloads. It’s supported by iOS and newer versions of Android. This method also supports adaptive bitrate streaming, see the bitRate parameter.",
                "operationId": "hls.m3u8",
                "tags": [
                    "Media Retrieval"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "A string which uniquely identifies the media file to stream.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bitRate",
                        "in": "query",
                        "description": "If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If this parameter is specified more than once, the server will create a variant playlist, suitable for adaptive bitrate streaming. The playlist will support streaming at all the specified bitrates. The server will automatically choose video dimensions that are suitable for the given bitrates. Since 1.9.0 you may explicitly request a certain width (480) and height (360) like so: bitRate=1000@480x360",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "audioTrack",
                        "in": "query",
                        "description": "The ID of the audio track to use. See `getVideoInfo` for how to get the list of available audio tracks for a video.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/vnd.apple.mpegurl": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "object",
                                    "description": "Error response TODO: TO BE DESCRIBED"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "hls.m3u8",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/hls/"
                }
            },
            "post": {
                "summary": "Downloads a given media file (HLS).",
                "description": "Creates an HLS (HTTP Live Streaming) playlist used for streaming video or audio. HLS is a streaming protocol implemented by Apple and works by breaking the overall stream into a sequence of small HTTP-based file downloads. It’s supported by iOS and newer versions of Android. This method also supports adaptive bitrate streaming, see the bitRate parameter.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postHls.m3u8",
                "tags": [
                    "Media Retrieval"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "A string which uniquely identifies the media file to stream."
                                    },
                                    "bitRate": {
                                        "type": "integer",
                                        "description": "If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If set to zero, no limit is imposed."
                                    },
                                    "audioTrack": {
                                        "type": "string",
                                        "description": "The ID of the audio track to use. See `getVideoInfo` for how to get the list of available audio tracks for a video."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/vnd.apple.mpegurl": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "object",
                                    "description": "Error response TODO: TO BE DESCRIBED"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "hls.m3u8",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/hls/"
                }
            }
        },
        "/rest/jukeboxControl": {
            "get": {
                "summary": "Controls the jukebox, i.e., playback directly on the server’s audio hardware.",
                "description": "Controls the jukebox, i.e., playback directly on the server’s audio hardware. Note: The user must be authorized to control the jukebox (see Settings > Users > User is allowed to play files in jukebox mode).",
                "operationId": "jukeboxControl",
                "tags": [
                    "Jukebox"
                ],
                "parameters": [
                    {
                        "name": "action",
                        "in": "query",
                        "description": "The operation to perform. Must be one of: get, status (since 1.7.0), set (since 1.7.0), start, stop, skip, add, clear, remove, shuffle, setGain",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/JukeboxAction"
                        }
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "Used by `skip` and `remove`. Zero-based index of the song to skip to or remove.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "(Since 1.7.0) Used by `skip`. Start playing this many seconds into the track.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Used by `add` and `set`. ID of song to add to the jukebox playlist. Use multiple id parameters to add many songs in the same request. (set is similar to a clear followed by a add, but will not change the currently playing track.)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gain",
                        "in": "query",
                        "description": "Used by `setGain` to control the playback volume. A float value between 0.0 and 1.0.",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0.0,
                            "maximum": 1.0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JukeboxControlResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "jukeboxControl",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/jukeboxcontrol/"
                }
            },
            "post": {
                "summary": "Controls the jukebox, i.e., playback directly on the server’s audio hardware.",
                "description": "Controls the jukebox, i.e., playback directly on the server’s audio hardware. Note: The user must be authorized to control the jukebox (see Settings > Users > User is allowed to play files in jukebox mode).\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postJukeboxControl",
                "tags": [
                    "Jukebox"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "description": "The operation to perform. Must be one of: get, status (since 1.7.0), set (since 1.7.0), start, stop, skip, add, clear, remove, shuffle, setGain",
                                        "type": "string"
                                    },
                                    "index": {
                                        "description": "Used by `skip` and `remove`. Zero-based index of the song to skip to or remove.",
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "offset": {
                                        "description": "(Since 1.7.0) Used by `skip`. Start playing this many seconds into the track.",
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "id": {
                                        "description": "Used by `add` and `set`. ID of song to add to the jukebox playlist. Use multiple id parameters to add many songs in the same request. (set is similar to a clear followed by an add, but will not change the currently playing track.)",
                                        "type": "string"
                                    },
                                    "gain": {
                                        "description": "Used by `setGain` to control the playback volume. A float value between 0.0 and 1.0.",
                                        "type": "number",
                                        "format": "float",
                                        "minimum": 0.0,
                                        "maximum": 1.0
                                    }
                                },
                                "required": [
                                    "action"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JukeboxControlResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "jukeboxControl",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/jukeboxcontrol/"
                }
            }
        },
        "/rest/ping": {
            "get": {
                "summary": "Used to test connectivity with the server.",
                "description": "Test connectivity with the server.",
                "operationId": "ping",
                "tags": [
                    "System"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "ping",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/ping/"
                }
            },
            "post": {
                "summary": "Used to test connectivity with the server.",
                "description": "Test connectivity with the server.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postPing",
                "tags": [
                    "System"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "ping",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/ping/"
                }
            }
        },
        "/rest/refreshPodcasts": {
            "get": {
                "summary": "Requests the server to check for new Podcast episodes.",
                "description": "Requests the server to check for new Podcast episodes. Note: The user must be authorized for Podcast administration (see Settings > Users > User is allowed to administrate Podcasts).",
                "operationId": "refreshPodcasts",
                "tags": [
                    "Podcast"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "refreshPodcasts",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/refreshpodcasts/"
                }
            },
            "post": {
                "summary": "Requests the server to check for new Podcast episodes.",
                "description": "Requests the server to check for new Podcast episodes. Note: The user must be authorized for Podcast administration (see Settings > Users > User is allowed to administrate Podcasts).\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postRefreshPodcasts",
                "tags": [
                    "Podcast"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "refreshPodcasts",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/refreshpodcasts/"
                }
            }
        },
        "/rest/savePlayQueue": {
            "get": {
                "summary": "Saves the state of the play queue for this user.",
                "description": "Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.",
                "operationId": "savePlayQueue",
                "tags": [
                    "Bookmarks"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of a song in the play queue. Use one id parameter for each song in the play queue.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "current",
                        "in": "query",
                        "description": "The ID of the current playing song.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "position",
                        "in": "query",
                        "description": "The position in milliseconds within the currently playing song.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "savePlayQueue",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/saveplayqueue/"
                }
            },
            "post": {
                "summary": "Saves the state of the play queue for this user.",
                "description": "Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postSavePlayQueue",
                "tags": [
                    "Bookmarks"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "ID of a song in the play queue. Use one id parameter for each song in the play queue."
                                    },
                                    "current": {
                                        "type": "string",
                                        "description": "The ID of the current playing song."
                                    },
                                    "position": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "The position in milliseconds within the currently playing song."
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                }
            }
        },
        "/rest/scrobble": {
            "get": {
                "summary": "Registers the local playback of one or more media files.",
                "description": "Registers the local playback of one or more media files. Typically used when playing media that is cached on the client. This operation includes the following:\n\n* “Scrobbles” the media files on last.fm if the user has configured his/her last.fm credentials on the server.\n* Updates the play count and last played timestamp for the media files. (Since 1.11.0)\n* Makes the media files appear in the “Now playing” page in the web app, and appear in the list of songs returned by getNowPlaying (Since 1.11.0)\n\nSince 1.8.0 you may specify multiple id (and optionally time) parameters to scrobble multiple files.",
                "operationId": "scrobble",
                "tags": [
                    "Media Annotation"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "A string which uniquely identifies the file to scrobble.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "(Since 1.8.0) The time (in milliseconds since 1 Jan 1970) at which the song was listened to.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "submission",
                        "in": "query",
                        "description": "Whether this is a “submission” or a “now playing” notification.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "scrobble",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/scrobble/"
                }
            },
            "post": {
                "summary": "Registers the local playback of one or more media files.",
                "description": "Registers the local playback of one or more media files. Typically used when playing media that is cached on the client. This operation includes the following:\n\n* “Scrobbles” the media files on last.fm if the user has configured his/her last.fm credentials on the server.\n* Updates the play count and last played timestamp for the media files. (Since 1.11.0)\n* Makes the media files appear in the “Now playing” page in the web app, and appear in the list of songs returned by getNowPlaying (Since 1.11.0)\n\nSince 1.8.0 you may specify multiple id (and optionally time) parameters to scrobble multiple files.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postScrobble",
                "tags": [
                    "Media Annotation"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "A string which uniquely identifies the file to scrobble."
                                    },
                                    "time": {
                                        "type": "integer",
                                        "description": "(Since 1.8.0) The time (in milliseconds since 1 Jan 1970) at which the song was listened to.",
                                        "minimum": 0
                                    },
                                    "submission": {
                                        "type": "boolean",
                                        "description": "Whether this is a “submission” or a “now playing” notification.",
                                        "default": true
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "scrobble",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/scrobble/"
                }
            }
        },
        "/rest/search": {
            "get": {
                "summary": "Returns a listing of files matching the given search criteria. Supports paging through the result.",
                "deprecated": true,
                "description": "Deprecated since 1.4.0, use search2 instead.\n\nReturns a listing of files matching the given search criteria. Supports paging through the result.",
                "operationId": "search",
                "tags": [
                    "Searching"
                ],
                "parameters": [
                    {
                        "name": "artist",
                        "in": "query",
                        "description": "Artist to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "album",
                        "in": "query",
                        "description": "Album to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "description": "Song title to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "any",
                        "in": "query",
                        "description": "Searches all fields.",
                        "allowEmptyValue": true,
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Maximum number of results to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Search result offset. Used for paging.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "newerThan",
                        "in": "query",
                        "description": "Only return matches that are newer than this. Given as milliseconds since 1970.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "search",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search/"
                }
            },
            "post": {
                "summary": "Returns a listing of files matching the given search criteria. Supports paging through the result.",
                "deprecated": true,
                "description": "Deprecated since 1.4.0, use search2 instead.\n\nReturns a listing of files matching the given search criteria. Supports paging through the result.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postSearch",
                "tags": [
                    "Searching"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "artist": {
                                        "type": "string",
                                        "description": "Artist to search for."
                                    },
                                    "album": {
                                        "type": "string",
                                        "description": "Album to search for."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Song title to search for."
                                    },
                                    "any": {
                                        "type": "boolean",
                                        "description": "Searches all fields.",
                                        "default": false
                                    },
                                    "count": {
                                        "type": "integer",
                                        "description": "Maximum number of results to return.",
                                        "default": 20,
                                        "minimum": 0
                                    },
                                    "offset": {
                                        "type": "integer",
                                        "description": "Search result offset. Used for paging.",
                                        "default": 0,
                                        "minimum": 0
                                    },
                                    "newerThan": {
                                        "type": "integer",
                                        "description": "Only return matches that are newer than this. Given as milliseconds since 1970.",
                                        "minimum": 0
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "search",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search/"
                }
            }
        },
        "/rest/search2": {
            "get": {
                "summary": "Returns a listing of files matching the given search criteria. Supports paging through the result. (v2)",
                "description": "Returns albums, artists and songs matching the given search criteria. Supports paging through the result.",
                "operationId": "search2",
                "tags": [
                    "Searching"
                ],
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "artistCount",
                        "in": "query",
                        "description": "Maximum number of artists to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "artistOffset",
                        "in": "query",
                        "description": "Search result offset for artists. Used for paging.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "albumCount",
                        "in": "query",
                        "description": "Maximum number of albums to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "albumOffset",
                        "in": "query",
                        "description": "Search result offset for albums. Used for paging.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "songCount",
                        "in": "query",
                        "description": "Maximum number of songs to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "songOffset",
                        "in": "query",
                        "description": "Search result offset for songs. Used for paging.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "musicFolderId",
                        "in": "query",
                        "description": "(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search2Response"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "search2",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search2/"
                }
            },
            "post": {
                "summary": "Returns a listing of files matching the given search criteria. Supports paging through the result. (v2)",
                "description": "Returns albums, artists and songs matching the given search criteria. Supports paging through the result.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postSearch2",
                "tags": [
                    "Searching"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "query": {
                                        "description": "Search query.",
                                        "type": "string"
                                    },
                                    "artistCount": {
                                        "description": "Maximum number of artists to return.",
                                        "type": "integer",
                                        "default": 20,
                                        "minimum": 0
                                    },
                                    "artistOffset": {
                                        "description": "Search result offset for artists. Used for paging.",
                                        "type": "integer",
                                        "default": 0,
                                        "minimum": 0
                                    },
                                    "albumCount": {
                                        "description": "Maximum number of albums to return.",
                                        "type": "integer",
                                        "default": 20,
                                        "minimum": 0
                                    },
                                    "albumOffset": {
                                        "description": "Search result offset for albums. Used for paging.",
                                        "type": "integer",
                                        "default": 0,
                                        "minimum": 0
                                    },
                                    "songCount": {
                                        "description": "Maximum number of songs to return.",
                                        "type": "integer",
                                        "default": 20,
                                        "minimum": 0
                                    },
                                    "songOffset": {
                                        "description": "Search result offset for songs. Used for paging.",
                                        "type": "integer",
                                        "default": 0,
                                        "minimum": 0
                                    },
                                    "musicFolderId": {
                                        "description": "(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "query"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search2Response"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "search2",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search2/"
                }
            }
        },
        "/rest/search3": {
            "get": {
                "summary": "Returns albums, artists and songs matching the given search criteria. Supports paging through the result. (v3)",
                "description": "Returns albums, artists and songs matching the given search criteria. Supports paging through the result.\n\nMusic is organized according to ID3 tags.",
                "operationId": "search3",
                "tags": [
                    "Searching"
                ],
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query. Servers must support an empty query and return all the data to allow clients to properly access all the media information for offline sync.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "artistCount",
                        "in": "query",
                        "description": "Maximum number of artists to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "artistOffset",
                        "in": "query",
                        "description": "Search result offset for artists. Used for paging.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "albumCount",
                        "in": "query",
                        "description": "Maximum number of albums to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "albumOffset",
                        "in": "query",
                        "description": "Search result offset for albums. Used for paging.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "songCount",
                        "in": "query",
                        "description": "Maximum number of songs to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "songOffset",
                        "in": "query",
                        "description": "Search result offset for songs. Used for paging.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        }
                    },
                    {
                        "name": "musicFolderId",
                        "in": "query",
                        "description": "(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search3Response"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "search3",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search3/"
                }
            },
            "post": {
                "summary": "Returns albums, artists and songs matching the given search criteria. Supports paging through the result. (v3)",
                "description": "Returns albums, artists and songs matching the given search criteria. Supports paging through the result.\n\nMusic is organized according to ID3 tags.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postSearch3",
                "tags": [
                    "Searching"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "query": {
                                        "type": "string",
                                        "description": "Search query. Servers must support an empty query and return all the data to allow clients to properly access all the media information for offline sync."
                                    },
                                    "artistCount": {
                                        "type": "integer",
                                        "default": 20,
                                        "minimum": 0,
                                        "description": "Maximum number of artists to return."
                                    },
                                    "artistOffset": {
                                        "type": "integer",
                                        "default": 0,
                                        "minimum": 0,
                                        "description": "Search result offset for artists. Used for paging."
                                    },
                                    "albumCount": {
                                        "type": "integer",
                                        "default": 20,
                                        "minimum": 0,
                                        "description": "Maximum number of albums to return."
                                    },
                                    "albumOffset": {
                                        "type": "integer",
                                        "default": 0,
                                        "minimum": 0,
                                        "description": "Search result offset for albums. Used for paging."
                                    },
                                    "songCount": {
                                        "type": "integer",
                                        "default": 20,
                                        "minimum": 0,
                                        "description": "Maximum number of songs to return."
                                    },
                                    "songOffset": {
                                        "type": "integer",
                                        "default": 0,
                                        "minimum": 0,
                                        "description": "Search result offset for songs. Used for paging."
                                    },
                                    "musicFolderId": {
                                        "type": "string",
                                        "description": "(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`."
                                    }
                                },
                                "required": [
                                    "query"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search3Response"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "search3",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search3/"
                }
            }
        },
        "/rest/setRating": {
            "get": {
                "summary": "Sets the rating for a music file.",
                "description": "Sets the rating for a music file.",
                "operationId": "setRating",
                "tags": [
                    "Media Annotation"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "A string which uniquely identifies the file (song) or folder (album/artist) to rate.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rating",
                        "in": "query",
                        "description": "The rating between 1 and 5 (inclusive), or 0 to remove the rating.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 5
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "setRating",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/setrating/"
                }
            },
            "post": {
                "summary": "Sets the rating for a music file.",
                "description": "Sets the rating for a music file.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postSetRating",
                "tags": [
                    "Media Annotation"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "A string which uniquely identifies the file (song) or folder (album/artist) to rate.",
                                        "type": "string"
                                    },
                                    "rating": {
                                        "description": "The rating between 1 and 5 (inclusive), or 0 to remove the rating.",
                                        "type": "integer",
                                        "minimum": 0,
                                        "maximum": 5
                                    }
                                },
                                "required": [
                                    "id",
                                    "rating"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                }
            }
        },
        "/rest/star": {
            "get": {
                "summary": "Attaches a star to a song, album or artist.",
                "description": "Attaches a star to a song, album or artist.",
                "operationId": "star",
                "tags": [
                    "Media Annotation"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed.",
                        "required": false,
                        "explode": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "albumId",
                        "in": "query",
                        "description": "The ID of an album to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.",
                        "required": false,
                        "explode": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "artistId",
                        "in": "query",
                        "description": "The ID of an artist to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.",
                        "required": false,
                        "explode": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "star",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/star/"
                }
            },
            "post": {
                "summary": "Attaches a star to a song, album or artist.",
                "description": "Attaches a star to a song, album or artist.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postStar",
                "tags": [
                    "Media Annotation"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed."
                                    },
                                    "albumId": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The ID of an album to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed."
                                    },
                                    "artistId": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The ID of an artist to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed."
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "star",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/star/"
                }
            }
        },
        "/rest/startScan": {
            "get": {
                "summary": "Initiates a rescan of the media libraries.",
                "description": "Initiates a rescan of the media libraries. Takes no extra parameters.",
                "operationId": "startScan",
                "tags": [
                    "Media Library Scanning"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StartScanResponse"
                                }
                            }
                        }
                    }
                },
                "externalDocs": {
                    "description": "startScan",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/startscan/"
                }
            },
            "post": {
                "summary": "Initiates a rescan of the media libraries.",
                "description": "Initiates a rescan of the media libraries. Takes no extra parameters.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postStartScan",
                "tags": [
                    "Media Library Scanning"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StartScanResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "startScan",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/startscan/"
                }
            }
        },
        "/rest/stream": {
            "get": {
                "summary": "Streams a given media file.",
                "description": "Streams a given media file.\n\nOpenSubsonic servers must not count access to this endpoint as a play and increase playcount. Clients can use the Scrobble endpoint to indicate that a media is played ensuring proper data in all cases.\n\nIf the server support the Transcode Offet extension, then it must accept the timeOffset parameter for music too.",
                "operationId": "stream",
                "tags": [
                    "Media Retrieval"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "A string which uniquely identifies the file to stream. Obtained by calls to getMusicDirectory.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxBitRate",
                        "in": "query",
                        "description": "(Since 1.2.0) If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If set to zero, no limit is imposed.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "(Since 1.6.0) Specifies the preferred target format (e.g., “mp3” or “flv”) in case there are multiple applicable transcodings. Starting with 1.9.0 you can use the special value “raw” to disable transcoding.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timeOffset",
                        "in": "query",
                        "description": "By default only applicable to video streaming. If specified, start streaming at the given offset (in seconds) into the media. The `Transcode Offset` extension enables the parameter to music too.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "(Since 1.6.0) Only applicable to video streaming. Requested video size specified as WxH, for instance “640x480”.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]+x[0-9]+$"
                        }
                    },
                    {
                        "name": "estimateContentLength",
                        "in": "query",
                        "description": "(Since 1.8.0). If set to “true”, the Content-Length HTTP header will be set to an estimated value for transcoded or downsampled media.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "converted",
                        "in": "query",
                        "description": "(Since 1.14.0) Only applicable to video streaming. Servers can optimize videos for streaming by converting them to MP4. If a conversion exists for the video in question, then setting this parameter to “true” will cause the converted video to be returned instead of the original.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/BinaryResponse"
                    }
                },
                "externalDocs": {
                    "description": "stream",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/stream/"
                }
            },
            "post": {
                "summary": "Streams a given media file.",
                "description": "Streams a given media file.\n\nOpenSubsonic servers must not count access to this endpoint as a play and increase playcount. Clients can use the Scrobble endpoint to indicate that a media is played ensuring proper data in all cases.\n\nIf the server supports the Transcode Offset extension, then it must accept the timeOffset parameter for music too.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postStream",
                "tags": [
                    "Media Retrieval"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "A string which uniquely identifies the file to stream. Obtained by calls to getMusicDirectory."
                                    },
                                    "maxBitRate": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "(Since 1.2.0) If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If set to zero, no limit is imposed."
                                    },
                                    "format": {
                                        "type": "string",
                                        "description": "(Since 1.6.0) Specifies the preferred target format (e.g., “mp3” or “flv”) in case there are multiple applicable transcodings. Starting with 1.9.0 you can use the special value “raw” to disable transcoding."
                                    },
                                    "timeOffset": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "By default only applicable to video streaming. If specified, start streaming at the given offset (in seconds) into the media. The `Transcode Offset` extension enables the parameter to music too."
                                    },
                                    "size": {
                                        "type": "string",
                                        "pattern": "^[0-9]+x[0-9]+$",
                                        "description": "(Since 1.6.0) Only applicable to video streaming. Requested video size specified as WxH, for instance “640x480”."
                                    },
                                    "estimateContentLength": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "(Since 1.8.0). If set to “true”, the Content-Length HTTP header will be set to an estimated value for transcoded or downsampled media."
                                    },
                                    "converted": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "(Since 1.14.0) Only applicable to video streaming. Servers can optimize videos for streaming by converting them to MP4. If a conversion exists for the video in question, then setting this parameter to “true” will cause the converted video to be returned instead of the original."
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/BinaryResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                }
            }
        },
        "/rest/tokenInfo": {
            "get": {
                "summary": "Returns information about an API key",
                "description": "OpenSubsonic extension name `apiKeyAuthentication` (As returned by `getOpenSubsonicExtensions`). Returns data about an API key.",
                "operationId": "tokenInfo",
                "tags": [
                    "System"
                ],
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTokenInfoResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Extension not supported"
                    }
                },
                "externalDocs": {
                    "description": "tokenInfo",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/tokeninfo/"
                }
            },
            "post": {
                "summary": "Returns information about an API key",
                "description": "OpenSubsonic extension name `apiKeyAuthentication` (As returned by `getOpenSubsonicExtensions`). Returns data about an API key.",
                "operationId": "postTokenInfo",
                "tags": [
                    "System"
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "description": "Successful or failed response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTokenInfoResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Extension not supported"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "tokenInfo",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/tokeninfo/"
                }
            }
        },
        "/rest/unstar": {
            "get": {
                "summary": "Removes a star to a song, album or artist.",
                "description": "Removes a star to a song, album or artist.",
                "operationId": "unstar",
                "tags": [
                    "Media Annotation"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed.",
                        "required": false,
                        "explode": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "albumId",
                        "in": "query",
                        "description": "The ID of an album to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.",
                        "required": false,
                        "explode": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "artistId",
                        "in": "query",
                        "description": "The ID of an artist to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.",
                        "required": false,
                        "explode": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "unstar",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/unstar/"
                }
            },
            "post": {
                "summary": "Removes a star to a song, album or artist.",
                "description": "Removes a star to a song, album or artist.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postUnstar",
                "tags": [
                    "Media Annotation"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "The ID of the file (song) or folder (album/artist) to unstar. Multiple parameters allowed."
                                    },
                                    "albumId": {
                                        "description": "The ID of an album to unstar. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed."
                                    },
                                    "artistId": {
                                        "description": "The ID of an artist to unstar. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed."
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "unstar",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/unstar/"
                }
            }
        },
        "/rest/updateInternetRadioStation": {
            "get": {
                "summary": "Updates an existing internet radio station.",
                "description": "Updates an existing internet radio station. Only users with admin privileges are allowed to call this method.",
                "operationId": "updateInternetRadioStation",
                "tags": [
                    "Internet Radio"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The ID of the station.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "streamUrl",
                        "in": "query",
                        "description": "The stream URL for the station.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The user-defined name for the station.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "homepageUrl",
                        "in": "query",
                        "description": "The home page URL for the station.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "updateInternetRadioStation",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/updateinternetradiostation/"
                }
            },
            "post": {
                "summary": "Updates an existing internet radio station.",
                "description": "Updates an existing internet radio station. Only users with admin privileges are allowed to call this method.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postUpdateInternetRadioStation",
                "tags": [
                    "Internet Radio"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The ID of the station."
                                    },
                                    "streamUrl": {
                                        "type": "string",
                                        "description": "The stream URL for the station."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The user-defined name for the station."
                                    },
                                    "homepageUrl": {
                                        "type": "string",
                                        "description": "The home page URL for the station."
                                    }
                                },
                                "required": [
                                    "id",
                                    "streamUrl",
                                    "name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "updateInternetRadioStation",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/updateinternetradiostation/"
                }
            }
        },
        "/rest/updatePlaylist": {
            "get": {
                "summary": "Updates a playlist. Only the owner of a playlist is allowed to update it.",
                "description": "Updates a playlist. Only the owner of a playlist is allowed to update it.",
                "operationId": "updatePlaylist",
                "tags": [
                    "Playlists"
                ],
                "parameters": [
                    {
                        "name": "playlistId",
                        "in": "query",
                        "description": "The playlist ID.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The human-readable name of the playlist.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment",
                        "in": "query",
                        "description": "The playlist comment.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "public",
                        "in": "query",
                        "description": "`true` if the playlist should be visible to all users, `false` otherwise.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "songIdToAdd",
                        "in": "query",
                        "description": "Add this song with this ID to the playlist. Multiple parameters allowed.",
                        "explode": true,
                        "style": "form",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "songIndexToRemove",
                        "in": "query",
                        "description": "Remove the song at this position in the playlist. Multiple parameters allowed.",
                        "explode": true,
                        "style": "form",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "updatePlaylist",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/updateplaylist/"
                }
            },
            "post": {
                "summary": "Updates a playlist. Only the owner of a playlist is allowed to update it.",
                "description": "Updates a playlist. Only the owner of a playlist is allowed to update it.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postUpdatePlaylist",
                "tags": [
                    "Playlists"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "playlistId": {
                                        "description": "The playlist ID.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The human-readable name of the playlist.",
                                        "type": "string"
                                    },
                                    "comment": {
                                        "description": "The playlist comment.",
                                        "type": "string"
                                    },
                                    "public": {
                                        "description": "`true` if the playlist should be visible to all users, `false` otherwise.",
                                        "type": "boolean"
                                    },
                                    "songIdToAdd": {
                                        "description": "Add this song with this ID to the playlist. Multiple parameters allowed.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "songIndexToRemove": {
                                        "description": "Remove the song at this position in the playlist. Multiple parameters allowed.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "playlistId"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "updatePlaylist",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/updateplaylist/"
                }
            }
        },
        "/rest/updateShare": {
            "get": {
                "summary": "Updates the description and/or expiration date for an existing share.",
                "description": "Updates the description and/or expiration date for an existing share.",
                "operationId": "updateShare",
                "tags": [
                    "Sharing"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the share to update.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "A user-defined description that will be displayed to people visiting the shared media.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expires",
                        "in": "query",
                        "description": "The time at which the share expires. Given as milliseconds since 1970, or zero to remove the expiration.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "updateShare",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/updateshare/"
                }
            },
            "post": {
                "summary": "Updates the description and/or expiration date for an existing share.",
                "description": "Updates the description and/or expiration date for an existing share.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postUpdateShare",
                "tags": [
                    "Sharing"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "ID of the share to update.",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A user-defined description that will be displayed to people visiting the shared media.",
                                        "type": "string"
                                    },
                                    "expires": {
                                        "description": "The time at which the share expires. Given as milliseconds since 1970, or zero to remove the expiration.",
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                },
                "externalDocs": {
                    "description": "updateShare",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/updateshare/"
                }
            }
        },
        "/rest/updateUser": {
            "get": {
                "summary": "Modifies an existing user on the server.",
                "description": "Modifies an existing user on the server.",
                "operationId": "updateUser",
                "tags": [
                    "User Management"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The name of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password of the user, either in clear text of hex-encoded (see above).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "The email address of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ldapAuthenticated",
                        "in": "query",
                        "description": "Whether the user is authenicated in LDAP.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "adminRole",
                        "in": "query",
                        "description": "Whether the user is administrator.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "settingsRole",
                        "in": "query",
                        "description": "Whether the user is allowed to change personal settings and password.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "streamRole",
                        "in": "query",
                        "description": "Whether the user is allowed to play files.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "jukeboxRole",
                        "in": "query",
                        "description": "Whether the user is allowed to play files in jukebox mode.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "downloadRole",
                        "in": "query",
                        "description": "Whether the user is allowed to download files.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "uploadRole",
                        "in": "query",
                        "description": "Whether the user is allowed to upload files.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "coverArtRole",
                        "in": "query",
                        "description": "Whether the user is allowed to change cover art and tags.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "commentRole",
                        "in": "query",
                        "description": "Whether the user is allowed to create and edit comments and ratings.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "podcastRole",
                        "in": "query",
                        "description": "Whether the user is allowed to administrate Podcasts.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "shareRole",
                        "in": "query",
                        "description": "Whether the user is allowed to share files with anyone.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "videoConversionRole",
                        "in": "query",
                        "description": "(Since 1.15.0) Whether the user is allowed to start video conversions.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "musicFolderId",
                        "in": "query",
                        "description": "(Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder.",
                        "required": false,
                        "explode": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "maxBitRate",
                        "in": "query",
                        "description": "(Since 1.13.0) The maximum bit rate (in Kbps) for the user. Audio streams of higher bit rates are automatically downsampled to this bit rate. Legal values: 0 (no limit), 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                32,
                                40,
                                48,
                                56,
                                64,
                                80,
                                96,
                                112,
                                128,
                                160,
                                192,
                                224,
                                256,
                                320
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    }
                },
                "externalDocs": {
                    "description": "updateUser",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/updateuser/"
                }
            },
            "post": {
                "summary": "Modifies an existing user on the server.",
                "description": "Modifies an existing user on the server.\n\nRequires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)",
                "operationId": "postUpdateUser",
                "tags": [
                    "User Management"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "The name of the user."
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "The password of the user, either in clear text or hex-encoded."
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "The email address of the user."
                                    },
                                    "ldapAuthenticated": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is authenticated in LDAP."
                                    },
                                    "adminRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is an administrator."
                                    },
                                    "settingsRole": {
                                        "type": "boolean",
                                        "default": true,
                                        "description": "Whether the user is allowed to change personal settings and password."
                                    },
                                    "streamRole": {
                                        "type": "boolean",
                                        "default": true,
                                        "description": "Whether the user is allowed to play files."
                                    },
                                    "jukeboxRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is allowed to play files in jukebox mode."
                                    },
                                    "downloadRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is allowed to download files."
                                    },
                                    "uploadRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is allowed to upload files."
                                    },
                                    "coverArtRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is allowed to change cover art and tags."
                                    },
                                    "commentRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is allowed to create and edit comments and ratings."
                                    },
                                    "podcastRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is allowed to administrate Podcasts."
                                    },
                                    "shareRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether the user is allowed to share files with anyone."
                                    },
                                    "videoConversionRole": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "(Since 1.15.0) Whether the user is allowed to start video conversions."
                                    },
                                    "musicFolderId": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "(Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder."
                                    },
                                    "maxBitRate": {
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            32,
                                            40,
                                            48,
                                            56,
                                            64,
                                            80,
                                            96,
                                            112,
                                            128,
                                            160,
                                            192,
                                            224,
                                            256,
                                            320
                                        ],
                                        "description": "(Since 1.13.0) The maximum bit rate (in Kbps) for the user. Audio streams of higher bit rates are automatically downsampled to this bit rate. Legal values: 0 (no limit), 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320."
                                    }
                                },
                                "required": [
                                    "username",
                                    "password"
                                ]
                            }
                        }
                    }
                },
                "parameters": [

                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EmptySubsonicResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/HTTPFormPostNotSupported"
                    }
                }
            }
        }
    },
    "components": {
        "responses": {
            "EmptySubsonicResponse": {
                "$ref": "./responses/EmptySubsonicResponse.json"
            },
            "HTTPFormPostNotSupported": {
                "$ref": "./responses/HTTPFormPostNotSupported.json"
            },
            "BinaryResponse": {
                "$ref": "./responses/BinaryResponse.json"
            }
        },
        "parameters": {
            "f": {
                "name": "f",
                "description": "The response format. Must be 'xml' or 'json'. For the purposes of this document, only `json` is allowed.",
                "in": "query",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": [
                        "json"
                    ]
                }
            }
        },
        "securitySchemes": {
            "apiKeyAuth": {
                "type": "apiKey",
                "name": "apiKey",
                "in": "query",
                "description": "[OS] An API key used for authentication. If specified, `p`, `t`, `s` nor `u` can be specified."
            },
            "username": {
                "type": "apiKey",
                "in": "query",
                "name": "u",
                "description": "The username."
            },
            "legacyPassword": {
                "type": "apiKey",
                "in": "query",
                "name": "p",
                "description": "The password, either in clear text or hex-encoded with a “enc:” prefix. Since 1.13.0 this should only be used for testing purposes. `u` must be specified."
            },
            "token": {
                "type": "apiKey",
                "in": "query",
                "name": "t",
                "description": "(Since 1.13.0) The authentication token computed as md5(password + salt). `u` and `s` must be specified. See https://opensubsonic.netlify.app/docs/api-reference/#authentication for details."
            },
            "salt": {
                "type": "apiKey",
                "in": "query",
                "name": "s",
                "description": "(Since 1.13.0) A random string (“salt”) used as input for computing the password hash. `u` and `t` must be specified. See https://opensubsonic.netlify.app/docs/api-reference/#authentication for details."
            },
            "protocolVersion": {
                "type": "apiKey",
                "name": "v",
                "description": "The protocol version implemented by the client, i.e., the version of the subsonic-rest-api.xsd schema used (see below).",
                "in": "query"
            },
            "clientName": {
                "type": "apiKey",
                "name": "c",
                "description": "A unique string identifying the client application.",
                "in": "query"
            },
            "format": {
                "name": "f",
                "type": "apiKey",
                "description": "The response format. Must be 'xml' or 'json'. For the purposes of this document, only `json` is allowed.",
                "in": "query"
            }
        },
        "schemas": {
            "SubsonicError": {
                "$ref": "./schemas/Error.json"
            },
            "SubsonicBaseResponse": {
                "$ref": "./schemas/SubsonicResponse/SubsonicBaseResponse.json"
            },
            "SubsonicSuccessResponse": {
                "$ref": "./schemas/SubsonicResponse/SubsonicSuccessResponse.json"
            },
            "SubsonicFailureResponse": {
                "$ref": "./schemas/SubsonicResponse/SubsonicFailureResponse.json"
            },
            "SubsonicResponse": {
                "$ref": "./schemas/SubsonicResponse.json"
            },
            "ItemGenre": {
                "$ref": "./schemas/ItemGenre.json"
            },
            "ArtistID3": {
                "$ref": "./schemas/ArtistID3.json"
            },
            "Contributor": {
                "$ref": "./schemas/Contributor.json"
            },
            "ReplayGain": {
                "$ref": "./schemas/ReplayGain.json"
            },
            "GenericMediaType": {
                "$ref": "./schemas/GenericMediaType.json"
            },
            "MediaType": {
                "$ref": "./schemas/MediaType.json"
            },
            "ExplicitStatus": {
                "$ref": "./schemas/ExplicitStatus.json"
            },
            "Child": {
                "$ref": "./schemas/Child.json"
            },
            "Playlist": {
                "$ref": "./schemas/Playlist.json"
            },
            "PlaylistWithSongs": {
                "$ref": "./schemas/PlaylistWithSongs.json"
            },
            "CreatePlaylistSuccessResponse": {
                "$ref": "./endpoints/createPlaylist/CreatePlaylistSuccessResponse.json"
            },
            "CreatePlaylistResponse": {
                "$ref": "./endpoints/createPlaylist/CreatePlaylistResponse.json"
            },
            "Share": {
                "$ref": "./schemas/Share.json"
            },
            "Shares": {
                "$ref": "./schemas/Shares.json"
            },
            "CreateSharesSuccessResponse": {
                "$ref": "./endpoints/createShares/CreateSharesSuccessResponse.json"
            },
            "CreateSharesResponse": {
                "$ref": "./endpoints/createShares/CreateSharesResponse.json"
            },
            "RecordLabel": {
                "$ref": "./schemas/RecordLabel.json"
            },
            "ItemDate": {
                "$ref": "./schemas/ItemDate.json"
            },
            "DiscTitle": {
                "$ref": "./schemas/DiscTitle.json"
            },
            "AlbumID3": {
                "$ref": "./schemas/AlbumID3.json"
            },
            "AlbumID3WithSongs": {
                "$ref": "./schemas/AlbumID3WithSongs.json"
            },
            "GetAlbumSuccessResponse": {
                "$ref": "./endpoints/getAlbum/GetAlbumSuccessResponse.json"
            },
            "GetAlbumResponse": {
                "$ref": "./endpoints/getAlbum/GetAlbumResponse.json"
            },
            "AlbumInfo": {
                "$ref": "./schemas/AlbumInfo.json"
            },
            "GetAlbumInfoSuccessResponse": {
                "$ref": "./endpoints/getAlbumInfo/GetAlbumInfoSuccessResponse.json"
            },
            "GetAlbumInfoResponse": {
                "$ref": "./endpoints/getAlbumInfo/GetAlbumInfoResponse.json"
            },
            "AlbumListType": {
                "$ref": "./schemas/AlbumListType.json"
            },
            "AlbumList": {
                "$ref": "./schemas/AlbumList.json"
            },
            "GetAlbumListSuccessResponse": {
                "$ref": "./endpoints/getAlbumList/GetAlbumListSuccessResponse.json"
            },
            "GetAlbumListResponse": {
                "$ref": "./endpoints/getAlbumList/GetAlbumListResponse.json"
            },
            "AlbumList2": {
                "$ref": "./schemas/AlbumList2.json"
            },
            "GetAlbumList2SuccessResponse": {
                "$ref": "./endpoints/getAlbumList2/GetAlbumList2SuccessResponse.json"
            },
            "GetAlbumList2Response": {
                "$ref": "./endpoints/getAlbumList2/GetAlbumList2Response.json"
            },
            "ArtistWithAlbumsID3": {
                "$ref": "./schemas/ArtistWithAlbumsID3.json"
            },
            "GetArtistSuccessResponse": {
                "$ref": "./endpoints/getArtist/GetArtistSuccessResponse.json"
            },
            "GetArtistResponse": {
                "$ref": "./endpoints/getArtist/GetArtistResponse.json"
            },
            "Artist": {
                "$ref": "./schemas/Artist.json"
            },
            "ArtistInfo": {
                "$ref": "./schemas/ArtistInfo.json"
            },
            "GetArtistInfoSuccessResponse": {
                "$ref": "./endpoints/getArtistInfo/GetArtistInfoSuccessResponse.json"
            },
            "GetArtistInfoResponse": {
                "$ref": "./endpoints/getArtistInfo/GetArtistInfoResponse.json"
            },
            "ArtistInfo2": {
                "$ref": "./schemas/ArtistInfo2.json"
            },
            "GetArtistInfo2SuccessResponse": {
                "$ref": "./endpoints/getArtistInfo2/GetArtistInfo2SuccessResponse.json"
            },
            "GetArtistInfo2Response": {
                "$ref": "./endpoints/getArtistInfo2/GetArtistInfo2Response.json"
            },
            "ArtistsID3": {
                "$ref": "./schemas/ArtistsID3.json"
            },
            "GetArtistsSuccessResponse": {
                "$ref": "./endpoints/getArtists/GetArtistsSuccessResponse.json"
            },
            "GetArtistsResponse": {
                "$ref": "./endpoints/getArtists/GetArtistsResponse.json"
            },
            "Bookmark": {
                "$ref": "./schemas/Bookmark.json"
            },
            "Bookmarks": {
                "$ref": "./schemas/Bookmarks.json"
            },
            "GetBookmarksSuccessResponse": {
                "$ref": "./endpoints/getBookmarks/GetBookmarksSuccessResponse.json"
            },
            "GetBookmarksResponse": {
                "$ref": "./endpoints/getBookmarks/GetBookmarksResponse.json"
            },
            "ChatMessage": {
                "$ref": "./schemas/ChatMessage.json"
            },
            "ChatMessages": {
                "$ref": "./schemas/ChatMessages.json"
            },
            "GetChatMessagesSuccessResponse": {
                "$ref": "./endpoints/getChatMessages/GetChatMessagesSuccessResponse.json"
            },
            "GetChatMessagesResponse": {
                "$ref": "./endpoints/getChatMessages/GetChatMessagesResponse.json"
            },
            "Genre": {
                "$ref": "./schemas/Genre.json"
            },
            "Genres": {
                "$ref": "./schemas/Genres.json"
            },
            "GetGenresSuccessResponse": {
                "$ref": "./endpoints/getGenres/GetGenresSuccessResponse.json"
            },
            "GetGenresResponse": {
                "$ref": "./endpoints/getGenres/GetGenresResponse.json"
            },
            "Index": {
                "$ref": "./schemas/Index.json"
            },
            "Indexes": {
                "$ref": "./schemas/Indexes.json"
            },
            "GetIndexesSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "indexes": {
                                "$ref": "#/components/schemas/Indexes"
                            }
                        },
                        "required": [
                            "indexes"
                        ]
                    }
                ]
            },
            "GetIndexesResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested indexes element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetIndexesSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetIndexesResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getindexes/"
                }
            },
            "InternetRadioStation": {
                "$ref": "./schemas/InternetRadioStation.json"
            },
            "InternetRadioStations": {
                "$ref": "./schemas/InternetRadioStations.json"
            },
            "GetInternetRadioStationsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "internetRadioStations": {
                                "$ref": "#/components/schemas/InternetRadioStations"
                            }
                        },
                        "required": [
                            "internetRadioStations"
                        ]
                    }
                ]
            },
            "GetInternetRadioStationsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested internetRadioStations element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetInternetRadioStationsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetInternetRadioStationsResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getinternetradiostations/"
                }
            },
            "License": {
                "$ref": "./schemas/License.json"
            },
            "GetLicenseSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "license": {
                                "$ref": "#/components/schemas/License"
                            }
                        },
                        "required": [
                            "license"
                        ]
                    }
                ]
            },
            "GetLicenseResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested license element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetLicenseSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetLicenseResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getlicense/"
                }
            },
            "Lyrics": {
                "$ref": "./schemas/Lyrics.json"
            },
            "GetLyricsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "lyrics": {
                                "$ref": "#/components/schemas/Lyrics"
                            }
                        },
                        "required": [
                            "lyrics"
                        ]
                    }
                ]
            },
            "GetLyricsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested lyrics element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetLyricsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetLicenseResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getlyrics/"
                }
            },
            "Line": {
                "$ref": "./schemas/Line.json"
            },
            "StructuredLyrics": {
                "$ref": "./schemas/StructuredLyrics.json"
            },
            "LyricsList": {
                "$ref": "./schemas/LyricsList.json"
            },
            "GetLyricsBySongIdSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "lyricsList": {
                                "$ref": "#/components/schemas/LyricsList"
                            }
                        },
                        "required": [
                            "lyricsList"
                        ]
                    }
                ]
            },
            "GetLyricsBySongIdResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested lyricsList",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetLyricsBySongIdSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetLyricsBySongIdResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getlyricsbysongid/"
                }
            },
            "Directory": {
                "$ref": "./schemas/Directory.json"
            },
            "GetMusicDirectorySuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "directory": {
                                "$ref": "#/components/schemas/Directory"
                            }
                        },
                        "required": [
                            "directory"
                        ]
                    }
                ]
            },
            "GetMusicDirectoryResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested directory element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetMusicDirectorySuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetMusicDirectoryResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getmusicdirectory/"
                }
            },
            "MusicFolder": {
                "$ref": "./schemas/MusicFolder.json"
            },
            "MusicFolders": {
                "$ref": "./schemas/MusicFolders.json"
            },
            "GetMusicFoldersSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "musicFolders": {
                                "$ref": "#/components/schemas/MusicFolders"
                            }
                        },
                        "required": [
                            "musicFolders"
                        ]
                    }
                ]
            },
            "GetMusicFoldersResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested musicFolders element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetMusicFoldersSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetMusicFoldersResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getmusicfolders/"
                }
            },
            "PodcastStatus": {
                "$ref": "./schemas/PodcastStatus.json"
            },
            "PodcastEpisode": {
                "$ref": "./schemas/PodcastEpisode.json"
            },
            "NewestPodcasts": {
                "$ref": "./schemas/NewestPodcasts.json"
            },
            "GetNewestPodcastsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "newestPodcasts": {
                                "$ref": "#/components/schemas/NewestPodcasts"
                            }
                        },
                        "required": [
                            "newestPodcasts"
                        ]
                    }
                ]
            },
            "GetNewestPodcastsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `newestPodcasts` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetNewestPodcastsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetNewestPodcastsResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getnewestpodcasts/"
                }
            },
            "NowPlayingEntry": {
                "$ref": "./schemas/NowPlayingEntry.json"
            },
            "NowPlaying": {
                "$ref": "./schemas/NowPlaying.json"
            },
            "GetNowPlayingSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "nowPlaying": {
                                "$ref": "#/components/schemas/NowPlaying"
                            }
                        },
                        "required": [
                            "nowPlaying"
                        ]
                    }
                ]
            },
            "GetNowPlayingResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `nowPlaying` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetNowPlayingSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetNowPlayingResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getnowplaying/"
                }
            },
            "OpenSubsonicExtension": {
                "$ref": "./schemas/OpenSubsonicExtension.json"
            },
            "GetOpenSubsonicExtensionsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "openSubsonicExtensions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OpenSubsonicExtension"
                                }
                            }
                        },
                        "required": [
                            "openSubsonicExtensions"
                        ]
                    }
                ]
            },
            "GetOpenSubsonicExtensionsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `openSubsonicExtensions` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetOpenSubsonicExtensionsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetOpenSubsonicExtensionsResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getopensubsonicextensions/"
                }
            },
            "GetPlaylistSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "playlist": {
                                "$ref": "#/components/schemas/PlaylistWithSongs"
                            }
                        },
                        "required": [
                            "playlist"
                        ]
                    }
                ]
            },
            "GetPlaylistResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested playlist element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetPlaylistSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetPlaylistResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplaylist/"
                }
            },
            "Playlists": {
                "$ref": "./schemas/Playlists.json"
            },
            "GetPlaylistsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "playlists": {
                                "$ref": "#/components/schemas/Playlists"
                            }
                        },
                        "required": [
                            "playlists"
                        ]
                    }
                ]
            },
            "GetPlaylistsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `playlists` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetPlaylistsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetPlaylistsResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplaylists/"
                }
            },
            "PlayQueue": {
                "$ref": "./schemas/PlayQueue.json"
            },
            "GetPlayQueueSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "playQueue": {
                                "$ref": "#/components/schemas/PlayQueue"
                            }
                        },
                        "required": [
                            "playQueue"
                        ]
                    }
                ]
            },
            "GetPlayQueueResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `playQueue` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetPlayQueueSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetPlayQueueResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getplayqueue/"
                }
            },
            "GetPodcastEpisodeSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "podcastEpisode": {
                                "$ref": "#/components/schemas/PodcastEpisode"
                            }
                        },
                        "required": [
                            "podcastEpisode"
                        ]
                    }
                ]
            },
            "GetPodcastEpisodeResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `podcastEpisode` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetPodcastEpisodeSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetPodcastEpisodeResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getpodcastepisode/"
                }
            },
            "PodcastChannel": {
                "$ref": "./schemas/PodcastChannel.json"
            },
            "Podcasts": {
                "$ref": "./schemas/Podcasts.json"
            },
            "GetPodcastsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "podcasts": {
                                "$ref": "#/components/schemas/Podcasts"
                            }
                        },
                        "required": [
                            "podcasts"
                        ]
                    }
                ]
            },
            "GetPodcastsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `podcasts` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetPodcastsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetPodcastsResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getpodcasts/"
                }
            },
            "Songs": {
                "$ref": "./schemas/Songs.json"
            },
            "GetRandomSongsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "randomSongs": {
                                "$ref": "#/components/schemas/Songs"
                            }
                        },
                        "required": [
                            "randomSongs"
                        ]
                    }
                ]
            },
            "GetRandomSongsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `randomSongs` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetRandomSongsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetRandomSongsResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getrandomsongs/"
                }
            },
            "ScanStatus": {
                "$ref": "./schemas/ScanStatus.json"
            },
            "GetScanStatusSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "scanStatus": {
                                "$ref": "#/components/schemas/ScanStatus"
                            }
                        },
                        "required": [
                            "scanStatus"
                        ]
                    }
                ]
            },
            "GetScanStatusResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `scanStatus` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetScanStatusSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetScanStatusResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getscanstatus/"
                }
            },
            "GetSharesSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "shares": {
                                "$ref": "#/components/schemas/Shares"
                            }
                        },
                        "required": [
                            "shares"
                        ]
                    }
                ]
            },
            "GetSharesResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `shares` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetSharesSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetSharesResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getshares/"
                }
            },
            "SimilarSongs": {
                "$ref": "./schemas/SimilarSongs.json"
            },
            "GetSimilarSongsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "similarSongs": {
                                "$ref": "#/components/schemas/SimilarSongs"
                            }
                        },
                        "required": [
                            "similarSongs"
                        ]
                    }
                ]
            },
            "GetSimilarSongsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `similarSongs` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetSimilarSongsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetSimilarSongsResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsimilarsongs/"
                }
            },
            "SimilarSongs2": {
                "$ref": "./schemas/SimilarSongs2.json"
            },
            "GetSimilarSongs2SuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "similarSongs2": {
                                "$ref": "#/components/schemas/SimilarSongs2"
                            }
                        },
                        "required": [
                            "similarSongs2"
                        ]
                    }
                ]
            },
            "GetSimilarSongs2Response": {
                "type": "object",
                "description": "A subsonic-response element with a nested `similarSongs2` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetSimilarSongs2SuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetSimilarSongs2Response",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsimilarsongs2/"
                }
            },
            "GetSongSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "song": {
                                "$ref": "#/components/schemas/Child"
                            }
                        },
                        "required": [
                            "song"
                        ]
                    }
                ]
            },
            "GetSongResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `song` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetSongSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetSongResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsong/"
                }
            },
            "GetSongsByGenreSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "songsByGenre": {
                                "$ref": "#/components/schemas/Songs"
                            }
                        },
                        "required": [
                            "songsByGenre"
                        ]
                    }
                ]
            },
            "GetSongsByGenreResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `songsByGenre` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetSongsByGenreSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetSongsByGenreResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getsongsbygenre/"
                }
            },
            "Starred": {
                "$ref": "./schemas/Starred.json"
            },
            "GetStarredSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "starred": {
                                "$ref": "#/components/schemas/Starred"
                            }
                        },
                        "required": [
                            "starred"
                        ]
                    }
                ]
            },
            "GetStarredResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `starred` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetStarredSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetStarredResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getstarred/"
                }
            },
            "Starred2": {
                "$ref": "./schemas/Starred2.json"
            },
            "GetStarred2SuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "starred2": {
                                "$ref": "#/components/schemas/Starred2"
                            }
                        },
                        "required": [
                            "starred2"
                        ]
                    }
                ]
            },
            "GetStarred2Response": {
                "type": "object",
                "description": "A subsonic-response element with a nested `starred2` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetStarred2SuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetStarred2Response",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getstarred2/"
                }
            },
            "TopSongs": {
                "$ref": "./schemas/TopSongs.json"
            },
            "GetTopSongsSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "topSongs": {
                                "$ref": "#/components/schemas/TopSongs"
                            }
                        },
                        "required": [
                            "topSongs"
                        ]
                    }
                ]
            },
            "GetTopSongsResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `topSongs` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetTopSongsSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetTopSongsResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/gettopsongs/"
                }
            },
            "User": {
                "$ref": "./schemas/User.json"
            },
            "GetUserSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "user": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "required": [
                            "user"
                        ]
                    }
                ]
            },
            "GetUserResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `user` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetUserSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetUserResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getuser/"
                }
            },
            "Users": {
                "$ref": "./schemas/Users.json"
            },
            "GetUsersSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "users": {
                                "$ref": "#/components/schemas/Users"
                            }
                        },
                        "required": [
                            "users"
                        ]
                    }
                ]
            },
            "GetUsersResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `user` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetUsersSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetUsersResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getusers/"
                }
            },
            "VideoInfo": {
                "$ref": "./schemas/VideoInfo.json"
            },
            "GetVideoInfoSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "videoInfo": {
                                "$ref": "#/components/schemas/VideoInfo"
                            }
                        },
                        "required": [
                            "videoInfo"
                        ]
                    }
                ]
            },
            "GetVideoInfoResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `videoInfo` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetVideoInfoSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetVideoInfoResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getvideoinfo/"
                }
            },
            "Videos": {
                "$ref": "./schemas/Videos.json"
            },
            "GetVideosSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "videos": {
                                "$ref": "#/components/schemas/Videos"
                            }
                        },
                        "required": [
                            "videos"
                        ]
                    }
                ]
            },
            "GetVideosResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `videos` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetVideosSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetVideosResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/getvideos/"
                }
            },
            "JukeboxAction": {
                "$ref": "./schemas/JukeboxAction.json"
            },
            "JukeboxStatus": {
                "$ref": "./schemas/JukeboxStatus.json"
            },
            "JukeboxPlaylist": {
                "$ref": "./schemas/JukeboxPlaylist.json"
            },
            "JukeboxControlSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "jukeboxStatus": {
                                "$ref": "#/components/schemas/JukeboxStatus"
                            },
                            "jukeboxPlaylist": {
                                "$ref": "#/components/schemas/JukeboxPlaylist"
                            }
                        }
                    }
                ]
            },
            "JukeboxControlResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested :\n\n- jukeboxStatus for all actions but get\n- jukeboxPlaylist for get action",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/JukeboxControlSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "JukeboxControlSuccessResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/jukeboxcontrol/"
                }
            },
            "SearchResult": {
                "$ref": "./schemas/SearchResult.json"
            },
            "SearchSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "searchResult": {
                                "$ref": "#/components/schemas/SearchResult"
                            }
                        },
                        "required": [
                            "searchResult"
                        ]
                    }
                ]
            },
            "SearchResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `searchResult` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SearchSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "SearchResultResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search/"
                }
            },
            "SearchResult2": {
                "$ref": "./schemas/SearchResult2.json"
            },
            "Search2SuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "searchResult2": {
                                "$ref": "#/components/schemas/SearchResult2"
                            }
                        },
                        "required": [
                            "searchResult2"
                        ]
                    }
                ]
            },
            "Search2Response": {
                "type": "object",
                "description": "A subsonic-response element with a nested `searchResult2` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Search2SuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "SearchResult2Response",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search2/"
                }
            },
            "SearchResult3": {
                "$ref": "./schemas/SearchResult3.json"
            },
            "Search3SuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "searchResult3": {
                                "$ref": "#/components/schemas/SearchResult3"
                            }
                        },
                        "required": [
                            "searchResult3"
                        ]
                    }
                ]
            },
            "Search3Response": {
                "type": "object",
                "description": "A subsonic-response element with a nested `searchResult3` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Search3SuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "SearchResult3Response",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/search3/"
                }
            },
            "StartScanSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "scanStatus": {
                                "$ref": "#/components/schemas/ScanStatus"
                            }
                        },
                        "required": [
                            "scanStatus"
                        ]
                    }
                ]
            },
            "StartScanResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested `scanStatus` element on success.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/StartScanSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "StartScanResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/startscan/"
                }
            },
            "TokenInfo": {
                "$ref": "./schemas/TokenInfo.json"
            },
            "GetTokenInfoSuccessResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SubsonicSuccessResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "tokenInfo": {
                                "$ref": "#/components/schemas/TokenInfo"
                            }
                        },
                        "required": [
                            "tokenInfo"
                        ]
                    }
                ]
            },
            "GetTokenInfoResponse": {
                "type": "object",
                "description": "A subsonic-response element with a nested tokenInfo on success, or error 44 on invalid token.",
                "properties": {
                    "subsonic-response": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetTokenInfoSuccessResponse"
                            },
                            {
                                "$ref": "#/components/schemas/SubsonicFailureResponse"
                            }
                        ]
                    }
                },
                "externalDocs": {
                    "description": "GetTokenInfoResponse",
                    "url": "https://opensubsonic.netlify.app/docs/endpoints/gettokeninfo/"
                }
            }
        }
    }
}